on: [push]

name: Docs & Coverage

jobs:

  rustdoc:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache stable toolchain
        uses: actions/cache@v1
        with:
          path: ~/.rustup
          key: ${{ runner.os }}-toolchain-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-toolchain-stable-
      - name: Cache cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-stable-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-stable-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-target-stable-${{ hashFiles('**/Cargo.lock') }}-quiet
          restore-keys: |
            ${{ runner.os }}-target-stable-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-target-stable-
      - name: Install stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          components: clippy, rustfmt

      - name: Run cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all --all-features

      - name: Generate artifact slug
        id: split-path
        uses: action-util/split-path@v1
        with:
          path: ${{ github.repository }}

      - name: Save documentation artifact
        uses: actions/upload-artifact@v1
        with:
          name: doc-${{ steps.split-path.outputs.basename }}
          path: target/doc

      - name: Clean Cargo cache
        run: |
          cargo install --force --no-default-features --features ci-autoclean cargo-cache
          cargo-cache

  grcov:
    name: Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v2
      - name: Cache nightly toolchain
        uses: actions/cache@v1
        with:
          path: ~/.rustup
          key: ${{ runner.os }}-toolchain-nightly-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-toolchain-nightly-
      - name: Cache cargo
        uses: actions/cache@v1
        with:
          path: ~/.cargo
          key: ${{ runner.os }}-cargo-nightly-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-nightly-
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-target-nightly-${{ hashFiles('**/Cargo.lock') }}-quiet
          restore-keys: |
            ${{ runner.os }}-target-nightly-${{ hashFiles('**/Cargo.lock') }}-
            ${{ runner.os }}-target-nightly-
      - name: Install nightly toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: nightly
          override: true

#      - name: Run cargo clean
#        uses: actions-rs/cargo@v1
#        with:
#          command: clean
#          args: --package graph
      - name: Run cargo test
        uses: actions-rs/cargo@v1
        env:
          CARGO_INCREMENTAL: '0'
          RUSTFLAGS: '-Awarnings -Zprofile -Ccodegen-units=1 -Cinline-threshold=0 -Clink-dead-code -Coverflow-checks=off -Zno-landing-pads'
        with:
          command: test
          args: --all-features --no-fail-fast
      - name: Run grcov
        id: coverage
        uses: action-util/grcov@v0.1.4
      - name: Generate coverage report
        run: |
          sudo apt-get install lcov
          sed -e '/^SF:\//,/^end_of_record$/d' ${{ steps.coverage.outputs.report }} > coverage.info
          genhtml -o coverage coverage.info

      - name: Generate artifact slug
        id: split-path
        uses: action-util/split-path@v1
        with:
          path: ${{ github.repository }}

      - name: Save coverage report artifact
        uses: actions/upload-artifact@v1
        with:
          name: coverage-${{ steps.split-path.outputs.basename }}
          path: coverage/

      - name: Clean Cargo cache
        run: |
          cargo install --force --no-default-features --features ci-autoclean cargo-cache
          cargo-cache
